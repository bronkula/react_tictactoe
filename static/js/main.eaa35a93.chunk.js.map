{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["winRows","handleSquareClick","i","grid","turn","setTurn","setGrid","setWinrow","winner","r","every","o","some","checkWin","Result","winrow","className","WhoseTurn","ResetButton","type","onClick","e","App","useState","map","key","style","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eaa35a93.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n\nconst initialGrid = () => ([false,false,false,false,false,false,false,false,false]);\n\nconst winRows = [\n\t[0,1,2], // Row 1\n\t[3,4,5], // Row 2\n\t[6,7,8], // Row 3\n\t[0,3,6], // Column 1\n\t[1,4,7], // Column 2\n\t[2,5,8], // Column 3\n\t[0,4,8], // Diagonal 1\n\t[2,4,6]  // Diagonal 2\n];\n\nconst checkWin = (grid,setWinrow) => {\n  let winner = false;\n  for(let r of winRows) {\n    if(r.every((o)=>grid[o]===1)) winner = [...r];\n    else if(r.every((o)=>grid[o]===0)) winner = [...r];\n  }\n  if(!winner && !grid.some(o=>o===false)) winner = true;\n  setWinrow(winner);\n}\n\nconst handleSquareClick = (i,grid,turn,setTurn,setGrid,setWinrow) => {\n  if(grid[i]!==false) return;\n  grid[i] = turn ? 1 : 0;\n  setTurn(!turn);\n  setGrid([...grid]);\n  checkWin(grid,setWinrow);\n}\n\nconst Result = ({winrow,grid}) => {\n  if(!winrow) return null;\n  let winner = winrow===true?false:grid[winrow[0]];\n  return <div className=\"text-center\">\n    {\n      winner===false? 'Stalemate!':\n      winner===0? 'Player X wins!':\n      'Player O wins!'\n    }\n  </div>;\n}\n\nconst WhoseTurn = ({winrow,turn}) => {\n  if(winrow) return null;\n  return <div className=\"text-center\">Player {turn?'O':'X'}, it's your turn.</div>;\n}\n\n\nconst ResetButton = ({winrow,setGrid,setTurn,setWinrow}) => {\n  if(winrow===false) return null;\n  return <div className=\"text-center\">\n    <button type=\"button\" onClick={e=>{\n      setGrid(initialGrid());\n      setTurn(false);\n      setWinrow(false);\n    }}>Reset</button>\n  </div>;\n}\n\n\n\nconst App = () => {\n  let [turn,setTurn] = useState(false);\n  let [winrow,setWinrow] = useState(false);\n  let [grid,setGrid] = useState(initialGrid());\n\n  return (<>\n    <div className=\"grid\">\n      {grid.map((o,i)=><div key={i} className={`grid-square ${winrow!==false && winrow!==true && winrow.some(o=>o===i)?'winner':''}`} onClick={e=>{\n        if(winrow!==false) return;\n        handleSquareClick(i,grid,turn,setTurn,setGrid,setWinrow);\n      }}>\n        {o===false?\"\":o===0?\"X\":\"O\"}\n      </div>)}\n    </div>\n    <div style={{marginTop:'1em'}}>\n      <WhoseTurn turn={turn} winrow={winrow} />\n      <Result winrow={winrow} grid={grid} />\n      <ResetButton winrow={winrow} setTurn={setTurn} setGrid={setGrid} setWinrow={setWinrow} />\n    </div>\n  </>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}